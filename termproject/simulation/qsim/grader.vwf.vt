// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2023 19:28:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          grader
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module grader_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg is_correct_0;
reg is_correct_1;
reg is_correct_2;
reg is_correct_3;
reg is_correct_4;
reg is_correct_5;
reg is_correct_6;
reg is_correct_7;
reg mode;
reg reset;
reg star;
// wires                                               
wire alphabet_found;
wire alphabet_not_found;
wire game_win;

// assign statements (if any)                          
grader i1 (
// port map - connection between master ports and signals/registers   
	.alphabet_found(alphabet_found),
	.alphabet_not_found(alphabet_not_found),
	.clk(clk),
	.game_win(game_win),
	.is_correct_0(is_correct_0),
	.is_correct_1(is_correct_1),
	.is_correct_2(is_correct_2),
	.is_correct_3(is_correct_3),
	.is_correct_4(is_correct_4),
	.is_correct_5(is_correct_5),
	.is_correct_6(is_correct_6),
	.is_correct_7(is_correct_7),
	.mode(mode),
	.reset(reset),
	.star(star)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// mode
initial
begin
	mode = 1'b0;
	mode = #290000 1'b1;
end 

// star
initial
begin
	star = 1'b0;
	star = #150000 1'b1;
	star = #130000 1'b0;
	star = #100000 1'b1;
	star = #80000 1'b0;
	star = #150000 1'b1;
	star = #80000 1'b0;
	star = #60000 1'b1;
	star = #80000 1'b0;
end 

// is_correct_0
initial
begin
	is_correct_0 = 1'b0;
	is_correct_0 = #780000 1'b1;
end 

// is_correct_1
initial
begin
	is_correct_1 = 1'b0;
	is_correct_1 = #780000 1'b1;
end 

// is_correct_2
initial
begin
	is_correct_2 = 1'b0;
	is_correct_2 = #410000 1'b1;
end 

// is_correct_3
initial
begin
	is_correct_3 = 1'b0;
	is_correct_3 = #210000 1'b1;
end 

// is_correct_4
initial
begin
	is_correct_4 = 1'b0;
	is_correct_4 = #420000 1'b1;
end 

// is_correct_5
initial
begin
	is_correct_5 = 1'b0;
	is_correct_5 = #630000 1'b1;
end 

// is_correct_6
initial
begin
	is_correct_6 = 1'b0;
	is_correct_6 = #640000 1'b1;
end 

// is_correct_7
initial
begin
	is_correct_7 = 1'b0;
	is_correct_7 = #640000 1'b1;
end 
endmodule

