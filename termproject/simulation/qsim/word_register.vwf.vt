// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/22/2023 20:56:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          word_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module word_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] input_alphabet;
reg mode;
reg reset;
reg sharp;
reg star;
// wires                                               
wire [4:0] alphabet_0;
wire [4:0] alphabet_1;
wire [4:0] alphabet_2;
wire [4:0] alphabet_3;
wire [4:0] alphabet_4;
wire [4:0] alphabet_5;
wire [4:0] alphabet_6;
wire [4:0] alphabet_7;

// assign statements (if any)                          
word_register i1 (
// port map - connection between master ports and signals/registers   
	.alphabet_0(alphabet_0),
	.alphabet_1(alphabet_1),
	.alphabet_2(alphabet_2),
	.alphabet_3(alphabet_3),
	.alphabet_4(alphabet_4),
	.alphabet_5(alphabet_5),
	.alphabet_6(alphabet_6),
	.alphabet_7(alphabet_7),
	.clk(clk),
	.input_alphabet(input_alphabet),
	.mode(mode),
	.reset(reset),
	.sharp(sharp),
	.star(star)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// mode
initial
begin
	mode = 1'b0;
end 

// star
initial
begin
	star = 1'b0;
	star = #50000 1'b1;
	star = #40000 1'b0;
	star = #70000 1'b1;
	star = #50000 1'b0;
	star = #40000 1'b1;
	star = #60000 1'b0;
	star = #60000 1'b1;
	star = #40000 1'b0;
	star = #50000 1'b1;
	star = #50000 1'b0;
	star = #50000 1'b1;
	star = #120000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// sharp
initial
begin
	sharp = 1'b0;
	sharp = #330000 1'b1;
	sharp = #20000 1'b0;
end 
// input_alphabet[ 4 ]
initial
begin
	input_alphabet[4] = 1'b0;
	input_alphabet[4] = #230000 1'b1;
	input_alphabet[4] = #70000 1'b0;
	input_alphabet[4] = #130000 1'b1;
	input_alphabet[4] = #60000 1'b0;
end 
// input_alphabet[ 3 ]
initial
begin
	input_alphabet[3] = 1'b0;
end 
// input_alphabet[ 2 ]
initial
begin
	input_alphabet[2] = 1'b0;
end 
// input_alphabet[ 1 ]
initial
begin
	input_alphabet[1] = 1'b0;
	input_alphabet[1] = #30000 1'b1;
	input_alphabet[1] = #50000 1'b0;
end 
// input_alphabet[ 0 ]
initial
begin
	input_alphabet[0] = 1'b0;
	input_alphabet[0] = #140000 1'b1;
	input_alphabet[0] = #60000 1'b0;
	input_alphabet[0] = #140000 1'b1;
	input_alphabet[0] = #50000 1'b0;
	input_alphabet[0] = #140000 1'b1;
	input_alphabet[0] = #60000 1'b0;
end 
endmodule

