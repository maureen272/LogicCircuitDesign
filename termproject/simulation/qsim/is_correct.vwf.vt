// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/28/2023 19:18:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          is_correct
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module is_correct_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:0] alphabet_0;
reg [4:0] alphabet_1;
reg [4:0] alphabet_2;
reg [4:0] alphabet_3;
reg [4:0] alphabet_4;
reg [4:0] alphabet_5;
reg [4:0] alphabet_6;
reg [4:0] alphabet_7;
reg clk;
reg [4:0] current_alphabet;
reg mode;
reg reset;
reg star;
// wires                                               
wire is_correct_0;
wire is_correct_1;
wire is_correct_2;
wire is_correct_3;
wire is_correct_4;
wire is_correct_5;
wire is_correct_6;
wire is_correct_7;

// assign statements (if any)                          
is_correct i1 (
// port map - connection between master ports and signals/registers   
	.alphabet_0(alphabet_0),
	.alphabet_1(alphabet_1),
	.alphabet_2(alphabet_2),
	.alphabet_3(alphabet_3),
	.alphabet_4(alphabet_4),
	.alphabet_5(alphabet_5),
	.alphabet_6(alphabet_6),
	.alphabet_7(alphabet_7),
	.clk(clk),
	.current_alphabet(current_alphabet),
	.is_correct_0(is_correct_0),
	.is_correct_1(is_correct_1),
	.is_correct_2(is_correct_2),
	.is_correct_3(is_correct_3),
	.is_correct_4(is_correct_4),
	.is_correct_5(is_correct_5),
	.is_correct_6(is_correct_6),
	.is_correct_7(is_correct_7),
	.mode(mode),
	.reset(reset),
	.star(star)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// mode
initial
begin
	mode = 1'b1;
end 

// star
initial
begin
	star = 1'b0;
	star = #80000 1'b1;
	star = #40000 1'b0;
	star = #210000 1'b1;
	star = #50000 1'b0;
	star = #180000 1'b1;
	star = #70000 1'b0;
end 
// alphabet_0[ 4 ]
initial
begin
	alphabet_0[4] = 1'b0;
end 
// alphabet_0[ 3 ]
initial
begin
	alphabet_0[3] = 1'b0;
end 
// alphabet_0[ 2 ]
initial
begin
	alphabet_0[2] = 1'b0;
end 
// alphabet_0[ 1 ]
initial
begin
	alphabet_0[1] = 1'b0;
end 
// alphabet_0[ 0 ]
initial
begin
	alphabet_0[0] = 1'b1;
end 
// alphabet_1[ 4 ]
initial
begin
	alphabet_1[4] = 1'b0;
end 
// alphabet_1[ 3 ]
initial
begin
	alphabet_1[3] = 1'b0;
end 
// alphabet_1[ 2 ]
initial
begin
	alphabet_1[2] = 1'b0;
end 
// alphabet_1[ 1 ]
initial
begin
	alphabet_1[1] = 1'b1;
end 
// alphabet_1[ 0 ]
initial
begin
	alphabet_1[0] = 1'b0;
end 
// alphabet_2[ 4 ]
initial
begin
	alphabet_2[4] = 1'b0;
end 
// alphabet_2[ 3 ]
initial
begin
	alphabet_2[3] = 1'b0;
end 
// alphabet_2[ 2 ]
initial
begin
	alphabet_2[2] = 1'b0;
end 
// alphabet_2[ 1 ]
initial
begin
	alphabet_2[1] = 1'b1;
end 
// alphabet_2[ 0 ]
initial
begin
	alphabet_2[0] = 1'b1;
end 
// alphabet_3[ 4 ]
initial
begin
	alphabet_3[4] = 1'b0;
end 
// alphabet_3[ 3 ]
initial
begin
	alphabet_3[3] = 1'b0;
end 
// alphabet_3[ 2 ]
initial
begin
	alphabet_3[2] = 1'b1;
end 
// alphabet_3[ 1 ]
initial
begin
	alphabet_3[1] = 1'b0;
end 
// alphabet_3[ 0 ]
initial
begin
	alphabet_3[0] = 1'b0;
end 
// alphabet_4[ 4 ]
initial
begin
	alphabet_4[4] = 1'b0;
end 
// alphabet_4[ 3 ]
initial
begin
	alphabet_4[3] = 1'b0;
end 
// alphabet_4[ 2 ]
initial
begin
	alphabet_4[2] = 1'b1;
end 
// alphabet_4[ 1 ]
initial
begin
	alphabet_4[1] = 1'b0;
end 
// alphabet_4[ 0 ]
initial
begin
	alphabet_4[0] = 1'b1;
end 
// alphabet_5[ 4 ]
initial
begin
	alphabet_5[4] = 1'b0;
end 
// alphabet_5[ 3 ]
initial
begin
	alphabet_5[3] = 1'b0;
end 
// alphabet_5[ 2 ]
initial
begin
	alphabet_5[2] = 1'b1;
end 
// alphabet_5[ 1 ]
initial
begin
	alphabet_5[1] = 1'b1;
end 
// alphabet_5[ 0 ]
initial
begin
	alphabet_5[0] = 1'b0;
end 
// alphabet_6[ 4 ]
initial
begin
	alphabet_6[4] = 1'b0;
end 
// alphabet_6[ 3 ]
initial
begin
	alphabet_6[3] = 1'b0;
end 
// alphabet_6[ 2 ]
initial
begin
	alphabet_6[2] = 1'b1;
end 
// alphabet_6[ 1 ]
initial
begin
	alphabet_6[1] = 1'b1;
end 
// alphabet_6[ 0 ]
initial
begin
	alphabet_6[0] = 1'b1;
end 
// alphabet_7[ 4 ]
initial
begin
	alphabet_7[4] = 1'b0;
end 
// alphabet_7[ 3 ]
initial
begin
	alphabet_7[3] = 1'b0;
end 
// alphabet_7[ 2 ]
initial
begin
	alphabet_7[2] = 1'b0;
end 
// alphabet_7[ 1 ]
initial
begin
	alphabet_7[1] = 1'b0;
end 
// alphabet_7[ 0 ]
initial
begin
	alphabet_7[0] = 1'b0;
end 
// current_alphabet[ 4 ]
initial
begin
	current_alphabet[4] = 1'b0;
end 
// current_alphabet[ 3 ]
initial
begin
	current_alphabet[3] = 1'b0;
	current_alphabet[3] = #520000 1'b1;
	current_alphabet[3] = #150000 1'b0;
end 
// current_alphabet[ 2 ]
initial
begin
	current_alphabet[2] = 1'b0;
end 
// current_alphabet[ 1 ]
initial
begin
	current_alphabet[1] = 1'b0;
	current_alphabet[1] = #310000 1'b1;
	current_alphabet[1] = #90000 1'b0;
end 
// current_alphabet[ 0 ]
initial
begin
	current_alphabet[0] = 1'b1;
	current_alphabet[0] = #150000 1'b0;
end 
endmodule

