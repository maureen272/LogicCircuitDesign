// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/23/2023 22:17:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          hang_man
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hang_man_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg eight;
reg five;
reg four;
reg mode;
reg nine;
reg one;
reg reset;
reg seven;
reg sharp;
reg six;
reg star;
reg three;
reg two;
reg zero;
// wires                                               
wire alphabet_found;
wire alphabet_not_found;
wire [4:0] out_alphabet;
wire out_is_correct_0;
wire out_is_correct_1;
wire out_is_correct_2;
wire out_is_correct_3;
wire out_is_correct_4;
wire out_is_correct_5;
wire out_is_correct_6;
wire out_is_correct_7;
wire out_sharp;
wire out_star;

// assign statements (if any)                          
hang_man i1 (
// port map - connection between master ports and signals/registers   
	.alphabet_found(alphabet_found),
	.alphabet_not_found(alphabet_not_found),
	.clk(clk),
	.eight(eight),
	.five(five),
	.four(four),
	.mode(mode),
	.nine(nine),
	.one(one),
	.out_alphabet(out_alphabet),
	.out_is_correct_0(out_is_correct_0),
	.out_is_correct_1(out_is_correct_1),
	.out_is_correct_2(out_is_correct_2),
	.out_is_correct_3(out_is_correct_3),
	.out_is_correct_4(out_is_correct_4),
	.out_is_correct_5(out_is_correct_5),
	.out_is_correct_6(out_is_correct_6),
	.out_is_correct_7(out_is_correct_7),
	.out_sharp(out_sharp),
	.out_star(out_star),
	.reset(reset),
	.seven(seven),
	.sharp(sharp),
	.six(six),
	.star(star),
	.three(three),
	.two(two),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// mode
initial
begin
	mode = 1'b0;
	mode = #370000 1'b1;
end 

// zero
initial
begin
	zero = 1'b0;
end 

// one
initial
begin
	one = 1'b0;
	one = #590000 1'b1;
	one = #30000 1'b0;
end 

// two
initial
begin
	two = 1'b0;
	two = #10000 1'b1;
	two = #30000 1'b0;
	two = #20000 1'b1;
	two = #30000 1'b0;
	two = #70000 1'b1;
	two = #30000 1'b0;
	two = #20000 1'b1;
	two = #30000 1'b0;
	two = #20000 1'b1;
	two = #30000 1'b0;
	two = #100000 1'b1;
	two = #30000 1'b0;
	two = #20000 1'b1;
	two = #30000 1'b0;
	two = #20000 1'b1;
	two = #30000 1'b0;
	two = #120000 1'b1;
	two = #30000 1'b0;
end 

// three
initial
begin
	three = 1'b0;
end 

// four
initial
begin
	four = 1'b0;
end 

// five
initial
begin
	five = 1'b0;
end 

// six
initial
begin
	six = 1'b0;
end 

// seven
initial
begin
	seven = 1'b0;
end 

// eight
initial
begin
	eight = 1'b0;
end 

// nine
initial
begin
	nine = 1'b0;
end 

// star
initial
begin
	star = 1'b0;
	star = #110000 1'b1;
	star = #30000 1'b0;
	star = #170000 1'b1;
	star = #30000 1'b0;
	star = #200000 1'b1;
	star = #30000 1'b0;
	star = #120000 1'b1;
	star = #30000 1'b0;
end 

// sharp
initial
begin
	sharp = 1'b0;
end 
endmodule

